function StringConverter(char) {
    const characters = new Map([
        [" ", [
            " ",
            " ",
            " ",
            " ",
            " ",
            " ",
        ]],
        ["A", [
            " █████╗ ",
            "██╔══██╗",
            "███████║",
            "██╔══██║",
            "██║  ██║",
            "╚═╝  ╚═╝",
        ]],
        ["B", [
            "██████╗ ",
            "██╔══██╗",
            "██████╔╝",
            "██╔══██╗",
            "██████╔╝",
            "╚═════╝ ",
        ]],
        ["C", [
            " ██████╗",
            "██╔════╝",
            "██║     ",
            "██║     ",
            "╚██████╗",
            " ╚═════╝",
        ]],
        ["D", [
            "██████╗ ",
            "██╔══██╗",
            "██║  ██║",
            "██║  ██║",
            "██████╔╝",
            "╚═════╝ ",
        ]],
        ["E", [
            "███████╗",
            "██╔════╝",
            "███████╗",
            "██╔════╝",
            "███████╗",
            "╚══════╝",
        ]],
        ["F", [
            "███████╗",
            "██╔════╝",
            "███████╗",
            "██╔════╝",
            "██║     ",
            "╚═╝     ",
        ]],
        ["G", [
            " ██████╗ ",
            "██╔════╝ ",
            "██║  ███╗",
            "██║   ██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]],
        ["H", [
            "██╗  ██╗",
            "██║  ██║",
            "███████║",
            "██╔══██║",
            "██║  ██║",
            "╚═╝  ╚═╝",
        ]],
        ["I", [
            "██╗",
            "██║",
            "██║",
            "██║",
            "██║",
            "╚═╝"
        ]],
        ["J", [
            "     ██╗",
            "     ██║",
            "     ██║",
            "██   ██║",
            "╚█████╔╝",
            " ╚════╝ ",
        ]],
        ["K", [
            "██╗  ██╗",
            "██║ ██╔╝",
            "█████╔╝ ",
            "██╔═██╗ ",
            "██║  ██╗",
            "╚═╝  ╚═╝",
        ]],
        ["L", [
            "██╗     ",
            "██║     ",
            "██║     ",
            "██║     ",
            "███████╗",
            "╚══════╝",
        ]],
        ["M", [
            "███╗   ███╗",
            "████╗ ████║",
            "██╔████╔██║",
            "██║╚██╔╝██║",
            "██║ ╚═╝ ██║",
            "╚═╝     ╚═╝",
        ]],
        ["N", [
            "███╗   ██╗",
            "████╗  ██║",
            "██╔██╗ ██║",
            "██║╚██╗██║",
            "██║ ╚████║",
            "╚═╝  ╚═══╝",
        ]],
        ["O", [
            " ██████  ",
            "██╔═══██╗",
            "██║   ██║",
            "██║   ██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]],
        ["P", [
            "██████╗ ",
            "██╔══██╗",
            "██████╔╝",
            "██╔═══╝ ",
            "██║     ",
            "╚═╝     "
        ]],
        ["Q", [
            " ██████╗ ",
            "██╔═══██╗",
            "██║   ██║",
            "██║▄▄ ██║",
            "╚██████╔╝",
            " ╚══▀▀═╝ ",
        ]],
        ["R", [
            "██████╗ ",
            "██╔══██╗",
            "██████╔╝",
            "██╔══██╗",
            "██║  ██║",
            "╚═╝  ╚═╝",
        ]],
        ["S", [
            " ██████╗",
            "██╔════╝",
            "███████╗",
            "╚════██║",
            "██████╔╝",
            "╚═════╝ ",
        ]],
        ["T", [
            "████████╗",
            "╚══██╔══╝",
            "   ██║   ",
            "   ██║   ",
            "   ██║   ",
            "   ╚═╝   ",
        ]],
        ["U", [
            "██╗   ██╗",
            "██║   ██║",
            "██║   ██║",
            "██║   ██║",
            "╚██████╔╝",
            " ╚═════╝ ",
        ]],
        ["V", [
            "██╗   ██╗",
            "██║   ██║",
            "██║   ██║",
            "╚██╗ ██╔╝",
            " ╚████╔╝ ",
            "  ╚═══╝  ",
        ]],
        ["W", [
            "██╗    ██╗",
            "██║    ██║",
            "██║ █╗ ██║",
            "██║███╗██║",
            "╚███╔███╔╝",
            " ╚══╝╚══╝ ",
        ]],
        ["X", [
            "██╗  ██╗",
            "╚██╗██╔╝",
            " ╚███╔╝ ",
            " ██╔██╗ ",
            "██╔╝ ╚██╗",
            "╚═╝   ╚═╝",
        ]],
        ["Y", [
            "██╗   ██╗",
            "╚██╗ ██╔╝",
            " ╚████╔╝ ",
            "  ╚██╔╝  ",
            "   ██║   ",
            "   ╚═╝   ",
        ]],
        ["Z", [
            "███████╗",
            "╚══███╔╝",
            "  ███╔╝ ",
            " ███╔╝  ",
            "███████╗",
            "╚══════╝",
        ]]
    ]);

    return characters.get(char);
}

function StringToBinary(input) {
    let binaryArray = [];

    for (const char of input) {
        const binary = StringConverter(char).map(row => row.split(''));

        if (binaryArray.length === 0) {
            binaryArray = binary;
        } else {
            binaryArray = binaryArray.map((row, index) => row.concat(binary[index]));
        }
    }

    return binaryArray;
}

function drawColor(binary, color1, color2){

    const lines = binary.split('\n')?.filter(line => line.length > 0);
    const width = lines.at(0)?.length;
    const height = lines.length ;


    let result = '';

    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            if (x === y*lines.length) {
                result += color2;
                result += lines[y][x];
            } else if (x === width - y * lines.length) {
                result += color1;
                result += lines[y][x];
            } else {
                result += lines[y][x];
            }
        }
        result += '\n';
    }


    return result.split('\n').filter(line => line.length > 0).map(line => `${color1}${line}`).join('\n');

}
module.exports = {
    StringToBinary,drawColor
};

